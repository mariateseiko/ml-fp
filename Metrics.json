{"paragraphs":[{"text":"%spark\nimport org.apache.spark.SparkContext\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.util.MLUtils\nimport org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\n\nval hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)\n\nval total = hiveContext.sql(\"select * from logs3\")\n\nval os = total.map(row => row.getString(row.fieldIndex(\"os\"))).distinct().zipWithIndex();\nval osMap = os.collectAsMap\n\nval device = total.map(row => row.getString(row.fieldIndex(\"device\"))).distinct().zipWithIndex();\nval deviceMap = device.collectAsMap\n\nval browser = total.map(row => row.getString(row.fieldIndex(\"browser\"))).distinct().zipWithIndex();\nval browserMap = browser.collectAsMap\n\nval keyword = total.map(row => row.getString(row.fieldIndex(\"keyword\"))).distinct().zipWithIndex();\nval keywordMap = keyword.collectAsMap\n\nval categoricalFeaturesInfo = Map[Int, Int](0 -> osMap.size , 1 -> deviceMap.size, 2 -> browserMap.size, 3 ->keywordMap.size)\n\nval treeVector = total.map(row => {val click = if (row.getLong(row.fieldIndex(\"clicks\")) > 0) 1.0 else 0.0 ;\nnew LabeledPoint(click.toDouble, Vectors.dense(\nosMap(row.getString(row.fieldIndex(\"os\"))).toDouble, \ndeviceMap(row.getString(row.fieldIndex(\"device\"))).toDouble, \nbrowserMap(row.getString(row.fieldIndex(\"browser\"))).toDouble,\nkeywordMap(row.getString(row.fieldIndex(\"keyword\"))).toDouble,\nrow.getInt(row.fieldIndex(\"city\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_width\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_height\")).toDouble, \nrow.getInt(row.fieldIndex(\"ad_slot_visibility\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_format\")).toDouble\n))}).cache\n\nval treeSplits = treeVector.randomSplit(Array(0.8, 0.2))\n\nval treeTraining = treeSplits(0)\nval treeTest = treeVector\n\n","dateUpdated":"2016-10-31T08:50:51+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477655147848_335556953","id":"20161028-114547_1851229839","dateCreated":"2016-10-28T11:45:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3083","dateFinished":"2016-10-31T08:51:02+0000","dateStarted":"2016-10-31T08:50:51+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.SparkContext\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.util.MLUtils\nimport org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\nhiveContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@2c3771fb\ntotal: org.apache.spark.sql.DataFrame = [ipinyou_id: string, os: string, device: string, browser: string, city: int, keyword: string, impressions: bigint, clicks: bigint, ad_slot_width: int, ad_slot_height: int, ad_slot_visibility: int, ad_slot_format: int]\nos: org.apache.spark.rdd.RDD[(String, Long)] = ZippedWithIndexRDD[2311] at zipWithIndex at <console>:191\nosMap: scala.collection.Map[String,Long] = Map(Windows 7 -> 7, Ubuntu -> 17, BlackBerry Tablet OS -> 30, Android 3.x Tablet -> 4, iOS 6 (iPhone) -> 21, Android 4.x -> 22, Windows Phone 8 -> 26, Mac OS X (iPad) -> 5, Unknown -> 8, Windows 2000 -> 14, Windows Vista -> 11, iOS 5 (iPhone) -> 3, Linux -> 10, Android 2.x Tablet -> 24, Windows XP -> 27, Sony Playstation -> 16, Unknown mobile -> 1, iOS 4 (iPhone) -> 13, Windows Phone 7 -> 2, Windows 8 -> 28, iOS 6 (iPad) -> 6, Symbian OS 9.x -> 12, Windows 98 -> 9, Android Mobile -> 29, Android 5.x Tablet -> 0, Symbian OS -> 19, Android -> 20, Windows -> 25, Mac OS X -> 18, Android 4.x Tablet -> 15, Android 2.x -> 23)\ndevice: org.apache.spark.rdd.RDD[(String, Long)] = ZippedWithIndexRDD[2316] at zipWithIndex at <console>:191\ndeviceMap: scala.collection.Map[String,Long] = Map(Game console -> 4, Unknown -> 2, Computer -> 3, Mobile -> 0, Tablet -> 1)\nbrowser: org.apache.spark.rdd.RDD[(String, Long)] = ZippedWithIndexRDD[2321] at zipWithIndex at <console>:191\nbrowserMap: scala.collection.Map[String,Long] = Map(Apple WebKit -> 3, Unknown -> 5, Safari -> 2, Internet Explorer -> 4, Chrome -> 6, Opera -> 8, Mozilla -> 1, Robot/Spider -> 0, Firefox -> 7)\nkeyword: org.apache.spark.rdd.RDD[(String, Long)] = ZippedWithIndexRDD[2326] at zipWithIndex at <console>:191\nkeywordMap: scala.collection.Map[String,Long] = Map(vacuum -> 141, membrane -> 167, tubing -> 155, electronics -> 121, obd -> 127, 126x3528 -> 99, fm -> 119, high -> 52, deals -> 145, cameras -> 26, arduino -> 10, diy -> 85, rear -> 83, nintendo -> 128, aux -> 23, chains1 -> 135, can -> 22, computer -> 162, rogue -> 45, motorcycle -> 148, call -> 0, detection -> 129, batteries -> 111, radar -> 68, note -> 72, bil -> 144, equipment -> 94, scanner -> 34, 9740 -> 53, input -> 63, trail -> 59, decorations -> 177, function -> 93, motor -> 165, charger -> 58, bluetooth -> 97, cdp -> 109, repair -> 131, security -> 12, tracker -> 17, loud -> 80, cleaning -> 142, crosstour -> 90, touran -> 100, halogen -> 73, newly -> 156, ii -> 33, sd -> 132, jewelry -> 55, coaxial -> 160, 24 -> 16, transmitte...categoricalFeaturesInfo: scala.collection.immutable.Map[Int,Int] = Map(0 -> 31, 1 -> 5, 2 -> 9, 3 -> 181)\ntreeVector: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[2327] at map at <console>:207\ntreeSplits: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint]] = Array(MapPartitionsRDD[2328] at randomSplit at <console>:209, MapPartitionsRDD[2329] at randomSplit at <console>:209)\ntreeTraining: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[2328] at randomSplit at <console>:209\ntreeTest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[2327] at map at <console>:207\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477655889485_947985780","id":"20161028-115809_1297390168","dateCreated":"2016-10-28T11:58:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3166","dateUpdated":"2016-10-31T08:50:51+0000","dateFinished":"2016-10-31T08:51:03+0000","dateStarted":"2016-10-31T08:50:51+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"text: org.apache.spark.rdd.RDD[String] = /tmp/tags.txt MapPartitionsRDD[2331] at textFile at <console>:187\nm: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[2332] at map at <console>:189\nk: org.apache.spark.broadcast.Broadcast[scala.collection.Map[String,String]] = Broadcast(2034)\nres125: Array[String] = Array(Keyword Value, automobile,cleaning,gun,oil,spray,engine,reinigungspistole,pipe,pollution,tool, cars,diesel,code,eobd,reader,part,gasoline,tool,obd2,obdmate, obd, nintendo,accessories,ds, rear,vision,view,wide,car,night,angle,back,camera, products, 1a,adapter,charger,car,usb,series,charging,powerfully, arrivals, arrivals, motorcycle,lighting, motorcycle,gloves,mini, motorcycle,fittings, motorcycle,atv, motorcycle,atv,mini,parts, motorcycle,accessories, html,miniinthebox,publicity, auto,obd2,bluetooth,mini,car,android,scanner,diagnostic,v1,interface, 1a,5v,samsung,charger,dual,mini,car,usb,ipad,iphone, measuring,tools, pcs,1800lm,marsing,foglight,ice,led,7000k,h7,headlamp,24v, auto,lossman,charger,car,usb,double,waterproof,hot,fashion, car,digital,cigarette,l..."},"text":"%spark\nval text = sc.textFile(\"/tmp/tags.txt\")\nval m = text.map(x => (x.split(\"\\t\")(0), x.split(\"\\t\")(1)))\nval k = sc.broadcast(m.collectAsMap)\nm.map(x=>k.value(x._1)).collect"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477670450166_1406059814","id":"20161028-160050_1790669273","dateCreated":"2016-10-28T04:00:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3622","dateUpdated":"2016-10-31T08:50:51+0000","dateFinished":"2016-10-31T08:51:11+0000","dateStarted":"2016-10-31T08:51:03+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"modelTree: org.apache.spark.mllib.tree.model.DecisionTreeModel = DecisionTreeModel classifier of depth 30 with 3331 nodes\ntreePredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2432] at map at <console>:219\ntreeMetrics: org.apache.spark.mllib.evaluation.MulticlassMetrics = org.apache.spark.mllib.evaluation.MulticlassMetrics@3b216c3c\nDecision tree Precision = 0.9935113738851589\nConfusion Matrix = \n79092.0  94.0   \n424.0    222.0  \ntreeBcMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@40dd8c15\nArea under ROC = 0.6712330861250062\n"},"text":"%spark\nval modelTree = DecisionTree.trainClassifier(treeTraining, \n2, \ncategoricalFeaturesInfo, \n\"gini\", \n30,\n181) \n\nval treePredictionAndLabels = treeTest.map { case LabeledPoint(label, features) =>\n  val prediction = modelTree.predict(features);\n  (prediction, label)\n}\n\nval treeMetrics = new MulticlassMetrics(treePredictionAndLabels)\nprintln(\"Decision tree Precision = \" + treeMetrics.precision)\nprintln(\"Confusion Matrix = \")\nprintln(treeMetrics.confusionMatrix)\nval treeBcMetrics = new BinaryClassificationMetrics(treePredictionAndLabels)\nprintln(\"Area under ROC = \" + treeBcMetrics.areaUnderROC)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477898666301_-972451504","id":"20161031-072426_928730695","dateCreated":"2016-10-31T07:24:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4311","dateUpdated":"2016-10-31T08:50:51+0000","dateFinished":"2016-10-31T08:51:12+0000","dateStarted":"2016-10-31T08:51:03+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"baiesModel: org.apache.spark.mllib.classification.NaiveBayesModel = org.apache.spark.mllib.classification.NaiveBayesModel@79fa9527\nbaiesPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2457] at map at <console>:217\nbaiesMetrics: org.apache.spark.mllib.evaluation.MulticlassMetrics = org.apache.spark.mllib.evaluation.MulticlassMetrics@1a5be68f\nPrecision = 0.49706884457360456\nbaiesBcMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@603e2979\nArea under ROC = 0.52769428939459\nArea under ROC = 39321.0  39865.0  \n285.0    361.0    \n"},"text":"%spark\nval baiesModel = NaiveBayes.train(treeTraining) \nval baiesPredictionAndLabels = treeTest.map { case LabeledPoint(label, features) =>\n  val prediction = baiesModel.predict(features)\n  (prediction, label)\n}\nval baiesMetrics = new MulticlassMetrics(baiesPredictionAndLabels)\nprintln(\"Precision = \" + baiesMetrics.precision)\nval baiesBcMetrics = new BinaryClassificationMetrics(baiesPredictionAndLabels)\nprintln(\"Area under ROC = \" + baiesBcMetrics.areaUnderROC)\nprintln(\"Area under ROC = \" + baiesMetrics.confusionMatrix)\n"},{"text":"%spark\nimport org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}\n\nval logisticRegModel = new LogisticRegressionWithLBFGS()\n  .setNumClasses(2)\n  .run(treeTraining)\n  val LRPredictionAndLabels = treeTest.map { case LabeledPoint(label, features) =>\n  val prediction = logisticRegModel.predict(features)\n  (prediction, label)\n}\nval LRMetrics = new MulticlassMetrics(LRPredictionAndLabels)\nprintln(\"Precision = \" + LRMetrics.precision)\nval LRBcMetrics = new BinaryClassificationMetrics(LRPredictionAndLabels)\nprintln(\"Area under ROC = \" + LRBcMetrics.areaUnderROC)\nprintln(\"Area under ROC = \" + LRMetrics.confusionMatrix)","dateUpdated":"2016-10-31T08:50:51+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477902687636_1151121050","id":"20161031-083127_1666636867","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}\nlogisticRegModel: org.apache.spark.mllib.classification.LogisticRegressionModel = org.apache.spark.mllib.classification.LogisticRegressionModel: intercept = 0.0, numFeatures = 9, numClasses = 2, threshold = 0.5\nLRPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2518] at map at <console>:218\nLRMetrics: org.apache.spark.mllib.evaluation.MulticlassMetrics = org.apache.spark.mllib.evaluation.MulticlassMetrics@4f6b656\nPrecision = 0.99190800681431\nLRBcMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@447050e0\nArea under ROC = 0.5\nArea under ROC = 79186.0  0.0  \n646.0    0.0  \n"},"dateCreated":"2016-10-31T08:31:27+0000","dateStarted":"2016-10-31T08:51:11+0000","dateFinished":"2016-10-31T08:51:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6012","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477899289569_-1279576360","id":"20161031-073449_409129131","dateCreated":"2016-10-31T07:34:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4432","dateUpdated":"2016-10-31T09:19:36+0000","dateFinished":"2016-10-31T09:17:58+0000","dateStarted":"2016-10-31T09:17:56+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.api.java.JavaSparkContext\ndata: List[(String, Double)] = List((tree,0.6712330861250062), (logistic reg,0.5), (baies,0.52769428939459))\ndistData: org.apache.spark.rdd.RDD[(String, Double)] = ParallelCollectionRDD[2783] at parallelize at <console>:253\ndata1: List[(String, Double)] = List((tree,0.9935113738851589), (logistic reg,0.99190800681431), (baies,0.49706884457360456))\ndistData: org.apache.spark.rdd.RDD[(String, Double)] = ParallelCollectionRDD[2785] at parallelize at <console>:253\ndata2: List[(String, org.apache.spark.mllib.linalg.Matrix)] = \nList((tree,79092.0  94.0   \n424.0    222.0  ), (logistic reg,79186.0  0.0  \n646.0    0.0  ), (baies,39321.0  39865.0  \n285.0    361.0    ))\ndistData: org.apache.spark.rdd.RDD[(String, org.apache.spark.mllib.linalg.Matrix)] = ParallelCollectionRDD[2787] at parallelize at <console>:253\n"},"text":"%spark\nimport org.apache.spark.api.java.JavaSparkContext\n\nval data = List((\"tree\",treeBcMetrics.areaUnderROC),  (\"logistic reg\", LRBcMetrics.areaUnderROC),(\"baies\",baiesBcMetrics.areaUnderROC))\nval distData = sc.parallelize(data)\ndistData.toDF.registerTempTable(\"metrics1\")\n\nval data1 = List((\"tree\",treeMetrics.precision), (\"logistic reg\", LRMetrics.precision), (\"baies\",baiesMetrics.precision))\nval distData = sc.parallelize(data1)\ndistData.toDF.registerTempTable(\"metrics2\")\n"},{"config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"keys":[{"name":"_c0","index":0,"aggr":"sum","$$hashKey":"object:8065"}],"values":[{"name":"_2","index":2,"aggr":"sum","$$hashKey":"object:8074"}],"groups":[{"name":"_c0","index":0,"aggr":"sum","$$hashKey":"object:8068"},{"name":"_1","index":1,"aggr":"sum","$$hashKey":"object:8069"}],"scatter":{"xAxis":{"name":"_c0","index":0,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477900186380_1822570299","id":"20161031-074946_1093337855","dateCreated":"2016-10-31T07:49:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4629","dateUpdated":"2016-10-31T09:12:10+0000","dateFinished":"2016-10-31T09:11:53+0000","dateStarted":"2016-10-31T09:11:53+0000","result":{"code":"SUCCESS","type":"TABLE","msg":"_c0\t_1\t_2\narea under roc\ttree\t0.6712330861250062\narea under roc\tlogistic reg\t0.5\narea under roc\tbaies\t0.52769428939459\nprec\ttree\t0.9935113738851589\nprec\tlogistic reg\t0.99190800681431\nprec\tbaies\t0.49706884457360456\n","comment":"","msgTable":[[{"key":"_1","value":"area under roc"},{"key":"_1","value":"tree"},{"key":"_1","value":"0.6712330861250062"}],[{"key":"_2","value":"area under roc"},{"key":"_2","value":"logistic reg"},{"key":"_2","value":"0.5"}],[{"value":"area under roc"},{"value":"baies"},{"value":"0.52769428939459"}],[{"value":"prec"},{"value":"tree"},{"value":"0.9935113738851589"}],[{"value":"prec"},{"value":"logistic reg"},{"value":"0.99190800681431"}],[{"value":"prec"},{"value":"baies"},{"value":"0.49706884457360456"}]],"columnNames":[{"name":"_c0","index":0,"aggr":"sum","$$hashKey":"object:8080"},{"name":"_1","index":1,"aggr":"sum","$$hashKey":"object:8081"},{"name":"_2","index":2,"aggr":"sum","$$hashKey":"object:8082"}],"rows":[["area under roc","tree","0.6712330861250062"],["area under roc","logistic reg","0.5"],["area under roc","baies","0.52769428939459"],["prec","tree","0.9935113738851589"],["prec","logistic reg","0.99190800681431"],["prec","baies","0.49706884457360456"]]},"text":"%sql\nselect \"area under roc\", * from metrics1 union all select \"precision\", * from metrics2"},{"config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"keys":[{"name":"_1","index":1,"aggr":"sum","$$hashKey":"object:8320"}],"values":[{"name":"_2","index":2,"aggr":"sum","$$hashKey":"object:8329"}],"groups":[{"name":"_c0","index":0,"aggr":"sum","$$hashKey":"object:8323"},{"name":"_1","index":1,"aggr":"sum","$$hashKey":"object:8324"}],"scatter":{"xAxis":{"name":"_c0","index":0,"aggr":"sum"},"yAxis":{"name":"_1","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477901481956_-942409918","id":"20161031-081121_2068486710","dateCreated":"2016-10-31T08:11:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5002","dateUpdated":"2016-10-31T09:13:21+0000","dateFinished":"2016-10-31T09:12:47+0000","dateStarted":"2016-10-31T09:12:47+0000","result":{"code":"SUCCESS","type":"TABLE","msg":"_c0\t_1\t_2\narea under roc\ttree\t0.6712330861250062\narea under roc\tlogistic reg\t0.5\narea under roc\tbaies\t0.52769428939459\nprecision\ttree\t0.9935113738851589\nprecision\tlogistic reg\t0.99190800681431\nprecision\tbaies\t0.49706884457360456\n","comment":"","msgTable":[[{"key":"_1","value":"area under roc"},{"key":"_1","value":"tree"},{"key":"_1","value":"0.6712330861250062"}],[{"key":"_2","value":"area under roc"},{"key":"_2","value":"logistic reg"},{"key":"_2","value":"0.5"}],[{"value":"area under roc"},{"value":"baies"},{"value":"0.52769428939459"}],[{"value":"precision"},{"value":"tree"},{"value":"0.9935113738851589"}],[{"value":"precision"},{"value":"logistic reg"},{"value":"0.99190800681431"}],[{"value":"precision"},{"value":"baies"},{"value":"0.49706884457360456"}]],"columnNames":[{"name":"_c0","index":0,"aggr":"sum","$$hashKey":"object:8311"},{"name":"_1","index":1,"aggr":"sum","$$hashKey":"object:8312"},{"name":"_2","index":2,"aggr":"sum","$$hashKey":"object:8313"}],"rows":[["area under roc","tree","0.6712330861250062"],["area under roc","logistic reg","0.5"],["area under roc","baies","0.52769428939459"],["precision","tree","0.9935113738851589"],["precision","logistic reg","0.99190800681431"],["precision","baies","0.49706884457360456"]]},"text":"%spark.sql\nselect \"area under roc\", * from metrics1 union all select \"precision\", * from metrics2"},{"config":{"colWidth":6,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"model","index":0,"aggr":"sum"}],"values":[{"name":"areaUnderROC","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"model","index":0,"aggr":"sum"},"yAxis":{"name":"areaUnderROC","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477901562771_262329189","id":"20161031-081242_9004133","dateCreated":"2016-10-31T08:12:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5120","dateUpdated":"2016-10-31T09:15:53+0000","dateFinished":"2016-10-31T09:13:43+0000","dateStarted":"2016-10-31T09:13:43+0000","title":"Area under ROC","result":{"code":"SUCCESS","type":"TABLE","msg":"model\tareaUnderROC\ntree\t0.6712330861250062\nlogistic reg\t0.5\nbaies\t0.52769428939459\n","comment":"","msgTable":[[{"key":"areaUnderROC","value":"tree"},{"key":"areaUnderROC","value":"0.6712330861250062"}],[{"value":"logistic reg"},{"value":"0.5"}],[{"value":"baies"},{"value":"0.52769428939459"}]],"columnNames":[{"name":"model","index":0,"aggr":"sum"},{"name":"areaUnderROC","index":1,"aggr":"sum"}],"rows":[["tree","0.6712330861250062"],["logistic reg","0.5"],["baies","0.52769428939459"]]},"text":"%sql\nselect  _1 as model, _2 as areaUnderROC from metrics1"},{"config":{"colWidth":6,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"model","index":0,"aggr":"sum"}],"values":[{"name":"precision","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"precision","index":1,"aggr":"sum"},"xAxis":{"name":"model","index":0,"aggr":"sum"}}},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477904814727_1310256021","id":"20161031-090654_1762212955","dateCreated":"2016-10-31T09:06:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7519","dateUpdated":"2016-10-31T09:21:23+0000","dateFinished":"2016-10-31T09:10:12+0000","dateStarted":"2016-10-31T09:10:12+0000","title":"Precision","result":{"code":"SUCCESS","type":"TABLE","msg":"model\tprecision\ntree\t0.9935113738851589\nlogistic reg\t0.99190800681431\nbaies\t0.49706884457360456\n","comment":"","msgTable":[[{"key":"precision","value":"tree"},{"key":"precision","value":"0.9935113738851589"}],[{"value":"logistic reg"},{"value":"0.99190800681431"}],[{"value":"baies"},{"value":"0.49706884457360456"}]],"columnNames":[{"name":"model","index":0,"aggr":"sum"},{"name":"precision","index":1,"aggr":"sum"}],"rows":[["tree","0.9935113738851589"],["logistic reg","0.99190800681431"],["baies","0.49706884457360456"]]},"text":"%sql\nselect  _1 as model, _2 as precision from metrics2"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477905461795_359375320","id":"20161031-091741_1540665613","dateCreated":"2016-10-31T09:17:41+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8512"}],"name":"DecisionTree","id":"2BZBTZA9J","angularObjects":{"2BV6637D6:shared_process":[],"2BY1Y2HJG:shared_process":[],"2BW4S5NJ4:shared_process":[],"2BX5CPDSX:shared_process":[],"2BWHGGFZJ:shared_process":[],"2BVYH21ZJ:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}