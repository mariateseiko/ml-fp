{"paragraphs":[{"text":"%spark\nimport org.apache.spark.SparkContext\nimport org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, LogisticRegressionModel}\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.util.MLUtils\nimport org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\nval hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)\n\nval denormalized = hiveContext.sql(\"select * from logs3\")\nval total = hiveContext.sql(\"select * from logs4\").cache()\ntotal.show()\n//переводим categorical features в конечную числовую последовательность\nval os = total.map(row => row.getString(row.fieldIndex(\"os\"))).distinct().zipWithUniqueId();\nval osMap = os.collectAsMap\n\nval device = total.map(row => row.getString(row.fieldIndex(\"device\"))).distinct().zipWithUniqueId();\nval deviceMap = device.collectAsMap\n\nval browser = total.map(row => row.getString(row.fieldIndex(\"browser\"))).distinct().zipWithUniqueId();\nval browserMap = browser.collectAsMap\n\nval keyword = total.map(row => row.getString(row.fieldIndex(\"keyword\"))).distinct().zipWithUniqueId();\nval keywordMap = keyword.collectAsMap\n\nval categoricalFeaturesInfo = Map[Int, Int](0 -> 60 , 1 -> 20, 2 -> 100, 3 ->400)\n\nval treeVector = denormalized.map(row => {val click = if (row.getLong(row.fieldIndex(\"clicks\")) > 0) 1.0 else 0.0 ;\nnew LabeledPoint(click.toDouble, \nVectors.dense(\n\nosMap(row.getString(row.fieldIndex(\"os\"))).toDouble, \ndeviceMap(row.getString(row.fieldIndex(\"device\"))).toDouble, \nbrowserMap(row.getString(row.fieldIndex(\"browser\"))).toDouble,\nkeywordMap(row.getString(row.fieldIndex(\"keyword\"))).toDouble,\nrow.getInt(row.fieldIndex(\"city\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_width\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_height\")).toDouble, \nrow.getInt(row.fieldIndex(\"ad_slot_visibility\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_format\")).toDouble\n))})\nval testVector = total.map(row => {val click = if (row.getLong(row.fieldIndex(\"clicks\")) > 0) 1.0 else 0.0 ;\nnew LabeledPoint(click.toDouble, \nVectors.dense(\n\nosMap(row.getString(row.fieldIndex(\"os\"))).toDouble, \ndeviceMap(row.getString(row.fieldIndex(\"device\"))).toDouble, \nbrowserMap(row.getString(row.fieldIndex(\"browser\"))).toDouble,\nkeywordMap(row.getString(row.fieldIndex(\"keyword\"))).toDouble,\nrow.getInt(row.fieldIndex(\"city\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_width\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_height\")).toDouble, \nrow.getInt(row.fieldIndex(\"ad_slot_visibility\")).toDouble,\nrow.getInt(row.fieldIndex(\"ad_slot_format\")).toDouble\n))})\nval treeSplits = treeVector.randomSplit(Array(0.6, 0.4))\n\nval treeTraining = treeVector\nval treeTest = testVector\n\nval modelTree = DecisionTree.trainClassifier(treeTraining, \n2, //количество конечных классов 2 - кликнет или не кликнет\ncategoricalFeaturesInfo, \n\"gini\", \n30, //масштабы дерева, можно как-то менять\n400) \n//modelTree.save(sc, \"/tmp/test1\")\n\nval treePredictionAndLabels = treeTest.map { case LabeledPoint(label, features) =>\n  val prediction = modelTree.predict(features);\n  if (prediction > 0 ) println(prediction + \" \" + label);\n  (prediction, label)\n}\nval test = treeTest.map { case LabeledPoint(label, features) =>\n  val prediction = modelTree.predict(features);\n  if (prediction > 0 ) println(prediction + \" \" + label);\n  prediction\n}.filter(p => p>0).count()\n\nval treeMetrics = new MulticlassMetrics(treePredictionAndLabels)\n\nprintln(\"Precision = \" + treeMetrics.precision)\nval baiesBcMetrics = new BinaryClassificationMetrics(treePredictionAndLabels)\nprintln(\"Area under ROC = \" + baiesBcMetrics.areaUnderROC)","dateUpdated":"2016-10-28T11:58:09+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477655147848_335556953","id":"20161028-114547_1851229839","dateCreated":"2016-10-28T11:45:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3083","dateFinished":"2016-10-28T11:59:22+0000","dateStarted":"2016-10-28T11:58:09+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.SparkContext\nimport org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, LogisticRegressionModel}\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.util.MLUtils\nimport org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\nhiveContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@732993ec\ndenormalized: org.apache.spark.sql.DataFrame = [ipinyou_id: string, os: string, device: string, browser: string, city: int, keyword: string, impressions: bigint, clicks: bigint, ad_slot_width: int, ad_slot_height: int, ad_slot_visibility: int, ad_slot_format: int]\ntotal: org.apache.spark.sql.DataFrame = [ipinyou_id: string, os: string, device: string, browser: string, city: int, keyword: string, impressions: bigint, clicks: bigint, ad_slot_width: int, ad_slot_height: int, ad_slot_visibility: int, ad_slot_format: int]\n+--------------------+----------+--------+-----------------+----+-----------+-----------+------+-------------+--------------+------------------+--------------+\n|          ipinyou_id|        os|  device|          browser|city|    keyword|impressions|clicks|ad_slot_width|ad_slot_height|ad_slot_visibility|ad_slot_format|\n+--------------------+----------+--------+-----------------+----+-----------+-----------+------+-------------+--------------+------------------+--------------+\n|6gfYZAzIOecykQ2st...|Windows XP|Computer|Internet Explorer|  56|        obd|          1|     0|          728|            90|                 1|             0|\n|6gfYZDn7O62yDZkze...| Windows 7|Computer|           Chrome| 360|    parking|          1|     0|         1000|            90|                 0|             0|\n|6gfYZDn7O6CyDoBWe...|Windows XP|Computer|Internet Explorer| 254|        car|          1|     0|          960|            90|                 0|             0|\n|6gfYZDn7O6Ly3ZC9e...|Windows XP|Computer|           Chrome| 242|    parking|          1|     0|         1000|            90|                 0|             0|\n|6gfYZDn7O6LyDokfe...|Windows XP|Computer|Internet Explorer| 147|    parking|          1|     0|         1000|            90|                 0|             0|\n|6gfYZDn7O6LykQBKe...|Windows XP|Computer|Internet Explorer|  95|accessories|          1|     0|          300|           250|                 0|             0|\n|6gfYZDn7O6a4DI2It...|Windows XP|Computer|Internet Explorer| 286|        car|          1|     0|          300|           250|                 0|             0|\n|6gfYZDn7O6kxkQLWe...|Windows XP|Computer|           Chrome| 334|    parking|          1|     0|          300|           250|                 0|             0|\n|6gfYZDn7OeL4DQLhe...|Windows XP|Computer|Internet Explorer| 275|    parking|          1|     0|          300|           250|                 0|             0|\n|6gfYZDn7OecyDo2At...|Windows XP|Computer|           Chrome| 275|    parking|          1|     0|          300|           250|                 0|             0|\n|6gfYZDn7Oejy3Ikhe...|Windows XP|Computer|Internet Explorer|  16|     strobe|          1|     0|          960|            90|                 0|             0|\n|6gfYZDn7Oen4DZ2Ie...|Windows XP|Computer|Internet Explorer| 233|        gps|          1|     0|          300|           250|                 1|             1|\n|6gfYZDn7OvCyDQLWe...|Windows XP|Computer|Internet Explorer| 334|    parking|          1|     0|          300|           250|                 0|             1|\n|6gfYZDn7OvCyDZCse...|Windows XP|Computer|Internet Explorer|  84|       loud|          1|     0|         1000|            90|                 0|             0|\n|6gfYZDn7OvaxkZl_e...|Windows XP|Computer|          Firefox|  96|        car|          1|     0|         1000|            90|                 0|             0|\n|6gfYZDn7OvjyDZkWe...|Windows XP|Computer|           Chrome|  91|    parking|          1|     0|          300|           250|                 0|             0|\n|6gfYZDn7OvjyDoLIt...|Windows XP|Computer|Internet Explorer|  82|    parking|          1|     0|          300|           250|                 2|             1|\n|6gfYZDn7Ovly3ZCKe...|Windows XP|Computer|Internet Explorer| 219|        dvd|          1|     0|         1000|            90|                 0|             0|\n|6gfYZDn7Ovny3oCIt...|Windows XP|Computer|Internet Explorer| 138|    parking|          1|     0|          960|            90|                 0|             0|\n|6gfYZDn7OvnyDZBKe...| Windows 7|Computer|          Firefox| 105|    parking|          1|     0|          336|           280|                 2|             1|\n+--------------------+----------+--------+-----------------+----+-----------+-----------+------+-------------+--------------+------------------+--------------+\nonly showing top 20 rows\n\nos: org.apache.spark.rdd.RDD[(String, Long)] = MapPartitionsRDD[587] at zipWithUniqueId at <console>:123\nosMap: scala.collection.Map[String,Long] = Map(Android 5.x -> 22, Windows 7 -> 34, Ubuntu -> 15, BlackBerry Tablet OS -> 53, Android 3.x Tablet -> 10, iOS 6 (iPhone) -> 17, Android 4.x -> 37, Symbian OS 7.x -> 26, Windows Phone 8 -> 25, Mac OS X (iPad) -> 18, Android 1.x -> 42, Unknown -> 58, Windows 2000 -> 11, iOS 5 (iPhone) -> 2, Windows Vista -> 24, Mac OS X (iPhone) -> 39, Linux -> 28, Android 2.x Tablet -> 27, Sony Playstation -> 7, Windows XP -> 45, BlackBerry 7 -> 14, Bada -> 20, Unknown mobile -> 8, iOS 4 (iPhone) -> 3, Chrome OS -> 50, Windows Phone 7 -> 16, Android (Google TV) -> 31, Windows 8 -> 43, iOS 6 (iPad) -> 4, MeeGo -> 29, Symbian OS 9.x -> 36, Windows 98 -> 12, Maemo -> 59, Android Mobile -> 51, Windows Mobile -> 55, Windows 8.1 -> 6, Android 5.x Tablet -> 0, Symbia...device: org.apache.spark.rdd.RDD[(String, Long)] = MapPartitionsRDD[592] at zipWithUniqueId at <console>:123\ndeviceMap: scala.collection.Map[String,Long] = Map(Unknown -> 10, Game console -> 1, Digital media receiver -> 11, Computer -> 3, Mobile -> 2, Tablet -> 6)\nbrowser: org.apache.spark.rdd.RDD[(String, Long)] = MapPartitionsRDD[597] at zipWithUniqueId at <console>:123\nbrowserMap: scala.collection.Map[String,Long] = Map(SeaMonkey -> 18, Apple WebKit -> 16, Safari -> 8, Unknown -> 26, Samsung Dolphin 2 -> 10, Internet Explorer -> 6, Chrome -> 34, Opera -> 11, Camino -> 3, Mozilla -> 0, Robot/Spider -> 2, Microsoft Edge -> 7, Firefox -> 1)\nkeyword: org.apache.spark.rdd.RDD[(String, Long)] = MapPartitionsRDD[602] at zipWithUniqueId at <console>:123\nkeywordMap: scala.collection.Map[String,Long] = Map(vacuum -> 29, membrane -> 91, tubing -> 81, electronics -> 159, obd -> 145, 126x3528 -> 3, fm -> 143, high -> 2, deals -> 31, cameras -> 54, diy -> 108, arduino -> 80, rear -> 92, nintendo -> 45, aux -> 20, chains1 -> 231, can -> 32, computer -> 75, rogue -> 226, call -> 14, motorcycle -> 17, detection -> 85, batteries -> 51, radar -> 134, note -> 26, bil -> 21, equipment -> 110, scanner -> 86, 9740 -> 10, input -> 210, trail -> 70, function -> 64, decorations -> 99, motor -> 77, charger -> 62, bluetooth -> 6, cdp -> 79, repair -> 93, security -> 96, tracker -> 176, loud -> 106, cleaning -> 25, crosstour -> 152, touran -> 13, halogen -> 12, newly -> 53, ii -> 88, sd -> 185, jewelry -> 34, coaxial -> 113, 24 -> 194, transmitters -> 162,...categoricalFeaturesInfo: scala.collection.immutable.Map[Int,Int] = Map(0 -> 60, 1 -> 20, 2 -> 100, 3 -> 400)\ntreeVector: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[607] at map at <console>:141\ntestVector: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[608] at map at <console>:139\ntreeSplits: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint]] = Array(MapPartitionsRDD[609] at randomSplit at <console>:143, MapPartitionsRDD[610] at randomSplit at <console>:143)\ntreeTraining: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[607] at map at <console>:141\ntreeTest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[608] at map at <console>:139\nmodelTree: org.apache.spark.mllib.tree.model.DecisionTreeModel = DecisionTreeModel classifier of depth 30 with 3697 nodes\ntreePredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[709] at map at <console>:153\ntest: Long = 11665\ntreeMetrics: org.apache.spark.mllib.evaluation.MulticlassMetrics = org.apache.spark.mllib.evaluation.MulticlassMetrics@13b82506\nPrecision = 0.9866782398160573\nbaiesBcMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@77fbf35f\nArea under ROC = 0.5060718454400067\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477655889485_947985780","id":"20161028-115809_1297390168","dateCreated":"2016-10-28T11:58:09+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3166"}],"name":"DecisionTree","id":"2BZBTZA9J","angularObjects":{"2BV6637D6:shared_process":[],"2BY1Y2HJG:shared_process":[],"2BW4S5NJ4:shared_process":[],"2BX5CPDSX:shared_process":[],"2BWHGGFZJ:shared_process":[],"2BVYH21ZJ:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}